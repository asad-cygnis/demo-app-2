name: Release Actions
on:
  workflow_dispatch:
  push:
    tags: ["v[0-9].[0-9]+.[0-9]+-*"]
jobs:
  setUpEnv:
    runs-on: [macOS-latest]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          cache: "yarn"

      - name: yarn install
        run: yarn install

      - name: Check Tag
        id: get_tag_version
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - if: (!endsWith(steps.get_tag_version.outputs.tag,'-dev') && !endsWith(steps.get_tag_version.outputs.tag,'-stag') && !endsWith(steps.get_tag_version.outputs.tag,'-qa') && !endsWith(steps.get_tag_version.outputs.tag,'-prod') )
        run: exit 1

      - if: contains(steps.get_tag_version.outputs.tag,'dev')
        run: yarn env:dev

      - if: contains(steps.get_tag_version.outputs.tag,'qa')
        run: yarn env:qa

      - if: contains(steps.get_tag_version.outputs.tag,'stag')
        run: yarn env:stag

      - if: contains(steps.get_tag_version.outputs.tag,'prod')
        run: yarn env:prod

  createiOSRelease:
    runs-on: [macOS-latest]
    needs: [setUpEnv]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          cache: "yarn"

      - name: yarn install
        run: yarn install

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.BUILD_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Make iOS Release
        run: yarn releaseIOS

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          path: builds/ipa/SEMANTIC-DEMO.ipa

  createAndroidRelease:
    runs-on: [macOS-latest]
    needs: [setUpEnv]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          cache: "yarn"
      - name: yarn install
        run: yarn install
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Android Release
        run: yarn releaseApk

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-apk
          path: android/app/build/outputs/apk/release/

  publishRelease:
    runs-on: [macOS-latest]
    needs: [createAndroidRelease]
    steps:
      - name: Download artifact android
        uses: actions/download-artifact@v2
        with:
          name: release-apk

      - name: Download artifact from ios
        uses: actions/download-artifact@v2
        with:
          name: release-ipa

      - name: Set apk and ipa as output parameters
        id: set_outputs
        run: |
          echo "::set-output name=release-apk::$(<release-apk/android/**/*.apk)"
          echo "::set-output name=release-ipa::$(<release-ipa/builds/**/*.ipa)"

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          title: ${{steps.get_tag_version.outputs.tag}}
          files: |
            ${{ steps.set_outputs.outputs.release-apk }}
            ${{ steps.set_outputs.outputs.release-ipa }}
